---

- name: Compile user groups list
  set_fact:
    user_groups: "{{ user.groups | default([]) }}"

- name: Compile user groups list
  set_fact:
    user_groups: "{{ user_groups + [sshd_allowed_ssh_users_group] }}"
  when: user.ssh_user | default(false)

- name: Add user
  user:
    name: "{{ user.name }}"
    home: "{{ user.home_dir | default(['/home', user.name]|join('/')) }}"
    groups: "{{ user_groups | unique }}"
    append: "{{ user.append_groups | default(false) }}"
    password: "{{ user.password | default('*') }}"
    shell: /bin/bash
    state: present
  when: user.name != 'root'

## SSH authorized keys
- name: Add authorized_keys from remote sources
  include_tasks: remote_authorized_keys.yml
  when: user.ssh_user | default(false) and user.name != 'root'

### Run this after the remote key import which would overwrite this set of changes
- name: Add authorized_keys from config
  include_tasks: config_authorized_keys.yml
  when: user.pubkeys | default([]) | length > 0 and user.name != 'root'

- name: Fix owner for .ssh
  file:
    path: "{{ user.home_dir }}/.ssh"
    owner: "{{ user.name }}"
    recurse: yes
    state: directory

- name: Set colors if not root
  set_fact:
    user_color: 220
    host_color: 208
  when: user.name != 'root'

- name: Set colors if root
  set_fact:
    user_color: 196
    host_color: 208
  when: user.name == 'root'

- name: Install prompt
  lineinfile:
    regex: '^export PS1=.*'
    line: 'export PS1="\[\e[38;5;{{ user_color }}m\]\\u\[\033[00m\]\[\e[38;5;241m\]@\[\033[00m\]\[\e[38;5;{{ host_color }}m\]\\h\[\033[00m\]:\$(pwd)\\\$ "'
    path: "{{ user.home_dir }}/.bashrc"

# Wrapping the ntfyr command in a bash call to silence the process fork and completion messages.
# If the login isn't automated cluster traffic or is local send a notification.
- name: Install login notification
  tags: alert,install
  blockinfile:
    block: |
      if [[ "$_CLUSTER_INTERNAL" != "$(cat /etc/machine-id)" ]]; then
        bash -c 'ntfyr -t alerts --timestamp "%message at %Y-%m-%d %H:%M %Z" -m "Login for $(whoami) on $(hostname) from$(cut -d " " -f 1 <<< "$SSH_CONNECTION")" >/tmp/ntfyr.log 2>&1 &' 2>/dev/null
      elif [[ -z "$SSH_CONNECTION" ]]; then
        bash -c 'ntfyr -t alerts --timestamp "%message at %Y-%m-%d %H:%M %Z" -m "Local login for $(whoami) on $(hostname)" >/tmp/ntfyr.log 2>&1 &' 2>/dev/null
      fi
    path: "{{ user.home_dir }}/.bashrc"
  when: user.name == 'root'

# Wrapping the ntfyr command in a bash call to silence the process fork and completion messages.
# Always send a notification but differentiate between local and remote in the message.
- name: Install login notification
  tags: alert,install
  blockinfile:
    block: |
      if [[ -n "$SSH_CONNECTION" ]]; then
        bash -c 'ntfyr -t alerts --timestamp "%message at %Y-%m-%d %H:%M %Z" -m "Login for $(whoami) on $(hostname) from$(cut -d " " -f 1 <<< "$SSH_CONNECTION")" >/tmp/ntfyr.log 2>&1 &' 2>/dev/null
      else
        bash -c 'ntfyr -t alerts --timestamp "%message at %Y-%m-%d %H:%M %Z" -m "Local login for $(whoami) on $(hostname)" >/tmp/ntfyr.log 2>&1 &' 2>/dev/null
      fi
    path: "{{ user.home_dir }}/.bashrc"
  when: user.name != 'root'
